散列表:数组一个扩展

散列表查询效率并不能笼统地说成是O(1).它跟散列函数，装载因子，散列冲突等都有关系。

散列函数设计的基本要求
1.散列函数计算得到的散列表是一个非负整数
2.如果key1=key2,那 hash(key1)==hash(key2)
3.如果 key!=ky2  那has(key1)!=hash(key2)

散列冲突
解决散列冲突的方法
开放寻址法（open addressing）和链表法（chaining）
一.开发寻址法
如果出现了散列冲突，我们就重新探测一个空闲位置
线性探测(LinearProbing)：当我们往散列表重插入数据时，如果某个数据经过散列函数散列之后，存储位置已经被占用了，我们就从当前位置开始，依次往后查找，
看是否有空闲位置，直到找到为止。
我们通过散列函数求出要查找元素的键值对应的散列值，然后比较数组中下标为散列值的元素和要查找的元素。如果相等，则说明就是我们要找的元素；否则就顺序往后依次查找。如果遍历到数组中的空闲位置，还没有找到，就说明要查找的元素并没有在散列表中。

散列表进行删除的时候需要对位置进行deleted标记 要不可能照成查询数据本应该存在的数据不存在。
弊端
散列插入的数据越来越多时，散列冲突发生的可能性越来越大，空闲位置越来越少，线性探测的时间就会越来越久。极端情况下，我们可能要探测散整个散列表。
2.二次探测
所谓二次探测，跟线性探测很像，线性探测每次探测的步长是 1，那它探测的下标序列就是 hash(key)+0，hash(key)+1，hash(key)+2……而二次探测探测的步长就变成了原来的“二次方”，也就是说，它探测的下标序列就是 hash(key)+0，hash(key)+12，hash(key)+22……
3.双重散列
所谓双重散列，意思就是不仅要使用一个散列函数。我们使用一组散列函数 hash1(key)，hash2(key)，hash3(key)……我们先用第一个散列函数，如果计算得到的存储位置已经被占用，再用第二个散列函数，依次类推，直到找到空闲的存储位置。

二链表发
链表法是一种更加常用的散列表冲突解决办法，相比开放寻址法，它要简单很多，
当插入的时候，我们只需要通过散列函数计算出对应的散列槽位，将其插入到对应链表中即可，所以插入的时间复杂度是 O(1)。当查找、删除一个元素时，我们同样通过散列函数计算出对应的槽，然后遍历链表查找或者删除。那查找或删除操作的时间复杂度是多少呢？实际上，这两个操作的时间复杂度跟链表的长度 k 成正比，也就是 O(k)。对于散列比较均匀的散列函数来说，理论上讲，k=n/m，其中 n 表示散列中数据的个数，m 表示散列表中“槽”的个数。解答开篇


散列表核心问题:散列函数设计和散列冲突解决

装载因子（load factor）来表示空位的多少
列表的装载因子=填入表中的元素个数/散列表的长度


设计散列表
1.散列函数的设计不能太复杂(过于复杂的散列函数，势必会消耗很多计算时间，也就间接地影响散列表的性能)
2.散列函数生成的值尽可能随机并且均匀分布(这样才能避免或者最小化散列冲突，而且即便出现冲突，散列没个槽里的数据也会比较平均，不会出现某个槽内数据特别多的情况)


模式
数据分析法:我们通过分析参赛编号的特征，把编号中的后两位作为散列值。我们还可以用类似的散列函数处理手机号码，因为手机号码前几位重复的可能性很大，但是后面几位就比较随机，我们可以取手机号的后四位作为散列值。这种散列函数的设计方法




动态扩容
1.装载因子过大时，我们可以进行动态扩容，重新申请一个更大的散列表。
当散列表的装载因子超过某个阈值时，就需要进行扩容。装载因子阈值需要选择得当。如果太大，会导致冲突过多，如果太小，会导致内存浪费严重。
装载因子阈值的设置要权衡时间，控件复杂度，如果内存不仅在，对执行效率要求很高，可以降低负载因子的阈值，想法，如果内存控件紧张，对
执行效率要求又不高，可以增加负载因子的值，甚至可以大于1

动态扩容优化
为了解决一次性扩容耗时过多的情况，我们可以将扩容操作穿插在插入操作的过程中，分批完成。


开放寻址法的优点
1.散列表中的数据存储在数组中，可以有效利用CPU缓存加快查询速度。
2.序列化简单
缺点
1.删除数据麻烦，需要特殊标记已经删除掉的数据
2.寻址法，数据都存储在一个数组中，比起链表，冲突的代码更高。 装载因子不能太大，这也导致这种方法比链表法更浪费内存控件。
总结一下，当数据量比较小、装载因子小的时候，适合采用开放寻址法。这也是 Java 中的ThreadLocalMap使用开放寻址法解决散列冲突的原因。

链表法
链表法对内存利用率比开发寻址法要高，因为链表结点可以在需要的时候在创建，并不需要像开放寻址法那样事先申请好。

链表因为要存指针，所以对于比较小的对象的存储，是比较消耗内存的，还有可能回让内存的消耗翻倍。而且，因为链表中的结点也是零散分布在内存重得，不是连续的，所以对CPU缓存是不友好的，这方面对执行效率也有一定的影响。
总结一下，基于链表的散列冲突处理方法比较适合存储大对象、大数据量的散列表，而且，比起开放寻址法，它更加灵活，支持更多的优化策略，比如用红黑树代替链表



何为一个工业级的散列表？工业级的散列表应该具有哪些特性？
支持快速地查询、插入、删除操作；内存占用合理，
不能浪费过多的内存空间；性能稳定，极端情况下，
散列表的性能也不会退化到无法接受的情况。

如何实现这样一个散列表呢？
设计一个合适的散列函数；
定义装载因子阈值，
并且设计动态扩容策略；
选择合适的散列冲突解决方法。

为什么散列表和链表经常一块使用
散列表这种数据结构虽然支持非常高校的数据插入，删除，查找操作，但是散列表中的数据都是通过散列函数打乱之后无规律存储的。也就说，它无法支持按照某种顺序快速地遍历数据，如果希望按照顺序遍历散列表中的数据，那我们需要将散列表中的数据拷贝倒数组中，然后排序，在便利。
因为散列表是动态数据结构，不停地有数据的插入，删除，所以每次我们希望按照顺序遍历散列表的数据的时候，都需要先排序，那效率势必会很低，为了解决这个问题，我们将散列表贺链表(或者调表)结合在一起使用。

