树的概念
1 高度 2.深度 3.层


二叉树:没个节点最多有两个"叉",也就是两个子节点，分别是左子节点和右子结点。
满二叉树:叶子节点全部都在最底层，除了叶子节点之外，每个节点都有左右两个子节点，这种二叉树叫做满二叉树。
完全二叉树:最后一层的叶子节点都靠左排列，并且除了最后一层，其它层的节点数都要达到最大，这种二叉树叫做完成二叉树。

链式二叉树
链式存储发:每个节点有三个字段，其中一个存储数据，另外两个是指针左右子节点的指针。我们只要拎住跟节点，就可以通过左右子节点的指针，吧整颗树都串起来。

数据二叉树
顺序存储法:我们根节点存储在下标i=1的位置，左节点存储在下标2*i=2的位置


二叉树的遍历
前端遍历:前端遍历是指，对于树中的任意节点来说，先打印这个节点，然后再打印它的左子树，最后打印它的右子树。

中序遍历是指
对于树中的任意节点来说，先打印它的左子树，然后再打印它的本身，最后打印它的右子树

后续遍历是指
对于树中的任意节点来说，先打印它的左子树，然后再打印它的右子树，最后打印这个节点本身，

二叉树的前，中，后序遍历就是一个递归的过程。

二叉树遍历的时间复杂度是多少
每个节点最多被访问二次，所以遍历操作的时间复杂度，跟节点的个数N成正比，也就是说二叉树遍历的时间复杂度是O(n)

二叉查找树
二叉查找树是为了实现快速查找而生的，二叉查找树要求，在树中的任意一个节点，其左子树中的每个节点的值，都要小于这个节点的值，而右子树节点的值都要大于这个节点的值。

二叉查找树快速地查找最大节点喝最小节点，前驱节点和后继节点

中序遍历二叉查找树，可以输出有序的数据序列，时间复杂度O(N),非常高效

散列表和二叉查找树优缺点
第一:散列表中的数据是无序存储的，如果要输出有序的数据，需要先进行排序。而对二叉查找树来说，我们只需要中序排序，就可以在O(n)的时间复杂度内，输出有序的数据序列。

第二:散列表扩容耗时很多，而且当遇到散列冲突时，性能不稳定，尽管二叉查找树性能不稳定，但是在工程中，我们最常用的平衡二叉查找树的性能非常稳定，时间复杂度稳定在O(logN)

第三:笼统地来说，尽管散列表的查找等操作的时间复杂度时常量级，但因为哈希冲突的存在，这个常量不一定比logn小，所以实际的查找速度可能不一定比O(logn)块。加上哈希函数的耗时，也不一定就比平衡二叉查找树效率高。
第四:散列表的构造比而查找树要复杂，需要考虑的东西很多，比如散列函数的设计，冲突办法的解决，扩容，缩容等。平衡二叉查找树只需要要考虑平衡性这一个问题，而且这个问题的解决方案比较成熟，固定。
最后为了避免过多的散列冲突，散列表装载因子不能太大，特别时基于开放寻址法解决冲突的散列表，不然会浪费一定的存储空间。



红黑树
红黑树需要满足以下几个要求
1.根节点是黑色的
2.每个叶子节点都是黑色的空节点(NIL),也就是说，叶子节点不存储数据。
3.任何相邻的节点都不能同时为红色，也就是说，红色节点是被黑色节点隔开的。
4.每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点。

平衡二叉树的初衷，是为了解决二叉查找树因为动态更新导致的性能退化问题。
红黑树规定，插入的节点必须是红色的。而且，二叉查找树中的新插入的节点都是放在叶子节点上。